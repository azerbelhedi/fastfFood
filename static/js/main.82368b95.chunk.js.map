{"version":3,"sources":["components/section1/slide.js","components/section1/section.js","components/section2/section2.js","components/nav/nav.js","App.js","serviceWorker.js","index.js"],"names":["Slide","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","words","index","run","_this2","setInterval","newState","length","setState","react_default","a","createElement","className","Component","Section1","slide","Title2","Section2","section2_Title2","NavBar","Navbar","style","backgroundColor","bg","expand","fixed","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","App","nav","section","section2_section2","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAmCeA,2BA/BX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,MAAQ,CAAC,SAAW,QAAU,UAC9BC,MAAQ,GAEZT,EAAKU,MANSV,qEASb,IAAAW,EAAAR,KACDS,YAAY,WACR,IAAIC,EAAWF,EAAKJ,MACpBM,EAASJ,MAAQE,EAAKJ,MAAME,MAAQ,EACjCI,EAASJ,OAASE,EAAKJ,MAAMC,MAAMM,SAClCD,EAASJ,MAAQ,GAErBE,EAAKI,SAASF,IACd,sCAIJ,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAY,eAAhB,SAAoCH,EAAAC,EAAAC,cAAA,gBAAQf,KAAKI,MAAMC,MAAML,KAAKI,MAAME,OAApC,KAApC,cAzBAW,cCuBLC,mLATP,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAY,YAEbH,EAAAC,EAAAC,cAACI,EAAD,cALOF,aCZjBG,SAAS,WACX,OAAQP,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAY,SAAhB,oBAeGK,mLARP,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAY,YACbH,EAAAC,EAAAC,cAACO,EAAD,cAJOL,6BCmBRM,mLApBP,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAS,CAACC,gBAAkB,WAAYC,GAAG,GAAGC,OAAO,KAAKC,MAAQ,OACtEhB,EAAAC,EAAAC,cAACS,EAAA,EAAOM,MAAR,CAAcC,KAAK,SAAnB,mBACAlB,EAAAC,EAAAC,cAACS,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,qBAC7BpB,EAAAC,EAAAC,cAACS,EAAA,EAAOU,SAAR,CAAiBC,GAAG,oBAChBtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKpB,UAAU,WACXH,EAAAC,EAAAC,cAACqB,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,QACAlB,EAAAC,EAAAC,cAACqB,EAAA,EAAIC,KAAL,CAAUN,KAAK,SAAf,QACAlB,EAAAC,EAAAC,cAACqB,EAAA,EAAIC,KAAL,CAAUN,KAAO,cAAjB,0BAZXd,aCYNqB,mLAZX,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACyB,EAAD,OACL3B,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAC0B,EAAD,OACL5B,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,+BARUE,aCMEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.82368b95.chunk.js","sourcesContent":["import React , { Component } from 'react' ;\nimport './section1.css' ;\n\nclass Slide extends Component{\n    constructor(props){\n        super(props) ;\n        this.state = {\n            words : [\"Coffee\" , \"Pizza\" , \"Plates\"] ,\n            index : 0 \n        }\n        this.run() ;\n    }\n\n    run(){\n        setInterval(() => {\n            let newState = this.state ;\n            newState.index = this.state.index + 1 ;\n            if(newState.index >= this.state.words.length){\n                newState.index = 0 ;\n            }\n            this.setState(newState) ;\n        } , 2000)\n    }\n\n    render(){\n        return(\n            <div>\n                <center>\n                    <h1 className = \"title slide\"> Best <span> {this.state.words[this.state.index]} </span> </h1>\n                </center>\n            </div>\n        )\n    }\n}\n\nexport default Slide ;","import React , { Component } from 'react' ;\nimport './section1.css' ;\nimport Slide from './slide' ;\n\nconst Title = () => {\n    return(\n        <div>\n            <center>\n                <div className = \"logo\"></div>\n            </center>\n            <center className = \"title\">Planet Food</center>\n        </div>\n    )\n}\n\nclass Section1 extends Component{\n    render(){\n        return(\n            <div className = \"section1\">\n                {/* <Title/> */}\n                <Slide/>\n            </div>\n        )\n    }\n}\n\nexport default Section1 ; ","import React , { Component } from 'react' ;\nimport './section2.css' ;\n\nconst Title2 = () => {\n    return (<div>\n        <center>\n            <h1 className = \"title\"> our plates </h1>\n        </center>\n    </div>)\n}\n\nclass Section2 extends Component{\n    render(){\n        return(\n            <div className = \"section2\">\n                <Title2 />\n            </div>\n        )\n    }\n}\n\nexport default Section2 ;","import React , { Component } from 'react' ;\nimport { Navbar } from 'react-bootstrap' ;\nimport { Nav } from 'react-bootstrap' ;\nimport { NavDropdown} from 'react-bootstrap' ;\nimport { Form } from 'react-bootstrap' ;\nimport { FormControl } from 'react-bootstrap' ;\nimport { Button } from 'react-bootstrap' ;\n\nclass NavBar extends Component {\n    render(){\n        return(\n            <div>\n                <center>\n                    <Navbar style = {{backgroundColor : \"#2b2828\"}} bg=\"\" expand=\"lg\" fixed = \"top\">\n                        <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\n                            <Nav className=\"mr-auto\">\n                                <Nav.Link href=\"#home\">Home</Nav.Link>\n                                <Nav.Link href=\"#link\">Link</Nav.Link>\n                                <Nav.Link href = \"#best-food\"> Best Food</Nav.Link>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Navbar>\n                </center>\n            </div>\n        )\n    }\n}\n\nexport default NavBar ;","import React, { Component } from 'react';\nimport './app.css' ;\nimport Section1 from './components/section1/section' ;\nimport Section2 from './components/section2/section2' ;\nimport ThemeSwitcher from './components/nav/nav' ;\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <ThemeSwitcher/>\n        <div><Section1 /></div>\n        <div><Section2 /></div>\n        <div>section3</div>\n        <div>section4</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}